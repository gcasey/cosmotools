/**
 * @brief An abstract base class that defines the basic properties of the
 * analysis tool.
 */
#ifndef ANALYSISTOOL_H_
#define ANALYSISTOOL_H_

#include "CosmologyToolsMacros.h"

// C/C++ includes
#include <string>
#include <set>

// MPI include
#include <mpi.h>

namespace cosmotk
{

// Forward declarations within cosmotk namespace
class SimulationParticles;

enum AnalysisToolFrequency
{
  EXPLICIT = 0,
  IMPLICIT = 1
};

class AnalysisTool
{
public:

  /**
   * @brief Default constructor
   */
  AnalysisTool();

  /**
   * @brief Destructor
   */
  virtual ~AnalysisTool();

  /**
   * @brief Set/Get the name of this analysis tool instance
   */
  GetNSetMacro(Name,std::string);

  /**
   * @brief Set whether output is generated by this AnalysisTool instance
   */
  GetNSetMacro(GenerateOutput,bool);

  /**
   * @brief Set the output file name where the output of this AnalysisTool is
   * going to be written.
   */
  GetNSetMacro(OutputFile,std::string);

  /**
   * @brief Set the frequency type, i.e., implicit or explicit.
   */
  GetNSetMacro(FrequencyType,int);

  /**
   * @brief Set the implicit frequency at which this algorithm will be executed.
   */
  GetNSetMacro(ImplicitFrequency,int);

  /**
   * @brief Set the analysis parameters.
   */
  GetNSetMacro(Parameters,Dictionary);

  /**
   * @brief Set MPI Communicator
   */
  GetNSetMacro(Communicator,MPI_Comm);

  /**
   * @brief Set visibility status, i.e., whether, the algorithm will be visible.
   */
  GetNSetMacro(VisibilityStatus,bool);
  inline bool IsVisible() {return this->VisibilityStatus;};

  /**
   * @brief Set the domain parameters
   * @param boxLength the length of the box
   * @param NG the size of the ghost-overlap zone
   * @param NDIM number of points in each dimension
   * @note domain is assumed to be square
   */
  void SetDomainParameters(REAL boxLength, INTEGER NG, INTEGER NDIM)
    {this->BoxLength=boxLength; this->NG = NG; this->NDIM=NDIM;};

  /**
   * @brief Sets the explicit timesteps at which this algorithm will be
   * executed.
   * @param timeSteps array of timesteps
   * @param N the number of timesteps.
   */
  void SetExplicitTimeSteps(INTEGER *timeSteps, int N);

  /**
   * @brief Determines if the algorithm should execute at the current timestep
   * @param ts the current timestep
   * @return status true if the algorithm must execute, else, false.
   */
  bool ShouldExecute(INTEGER ts);

  /**
   * @brief Parses the parameters from the given dictionary.
   */
  virtual void ParseParameters() = 0;

  /**
   * @brief Executes the analysis tool. Implementation is defined by
   * concrete classes.
   */
  virtual void Execute(SimulationParticles *particles) = 0;

  /**
   * @brief Writes the output to a file. Implementation is defined by
   * concrete classes.
   */
  virtual void WriteOutput() = 0;

protected:

  // Domain parameters
  REAL BoxLength;
  INTEGER NG;
  INTEGER NDIM;

  // Name of the analysis tool, set in the constructor of concrete classes
  std::string Name;

  // Common analysis tool parameters, read from the configuration file
  bool GenerateOutput;
  std::string OutputFile;

  int FrequencyType;
  int ImplicitFrequency;
  std::set<int> ExplicitTimeSteps;

  bool VisibilityStatus;

  // Storage of parameters
  Dictionary Parameters;

  // MPI communicator used
  MPI_Comm Communicator;

  /**
   * @brief Returns the value of the parameter with the given key
   * @param key the name of the parameter in query
   * @return the value of the parameter
   */
  double GetDoubleParameter(std::string key);

  /**
   * @brief Returns the value of the parameter with the given key
   * @param key the name of the parameter in query
   * @return the value of the parameter
   */
  int GetIntParameter(std::string key);

  /**
   * @brief Returns the value of the parameter with the given key
   * @param key the name of the parameter in query
   * @return the value of the parameter
   */
  std::set<int> GetIntListParameter(std::string key);

  /**
   * @brief Returns the value of the parameter with the given key
   * @param key the name of the parameter in query
   * @return the value of the parameter
   */
  bool GetBooleanParameter(std::string key);

  /**
   * @brief Returns the value of the parameter with the given key
   * @param key the name of the parameter in query
   * @return the value of the parameter
   */
  std::string GetStringParameter(std::string key);

  /**
   * @brief Parse basic/common parameters for all analysis tools
   * @note This method is intended as a helper method for concrete instances
   * @pre Parameters.empty() == false
   */
  void ParseBasicParameters();

private:
  DISABLE_COPY_AND_ASSIGNMENT(AnalysisTool);
};

} /* namespace cosmotk */
#endif /* ANALYSISTOOL_H_ */
